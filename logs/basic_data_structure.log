sys_inc sys_inc
  State.counter >= 0: commute
sys_inc sys_dec
  State.counter >= 0: commute
sys_inc sys_iszero
  And(State.counter >= 0,
      Not(State.counter == -1) == (State.counter == 0)): results diverge
sys_inc sys_iszero
  And(State.counter >= 0,
      (State.counter == -1) == (State.counter == 0)): commute
sys_dec sys_dec
  State.counter >= 0: commute
sys_dec sys_iszero
  And(State.counter >= 0,
      Not(State.counter == 1) == (State.counter == 0)): results diverge
sys_dec sys_iszero
  And(State.counter >= 0,
      (State.counter == 1) == (State.counter == 0)): commute
sys_iszero sys_iszero
  State.counter >= 0: commute

write_a write_a
  And(Pipe.elems.len >= 0,
      Pipe.nread >= 0,
      Pipe.nread <= Pipe.elems.len): commute

write_a write_b
  And(Pipe.elems.len >= 0,
      Pipe.nread >= 0,
      Pipe.nread <= Pipe.elems.len,
      Not(Store(Store(Pipe.elems,
                      Pipe.elems.len,
                      Pipe.writeitem.a),
                1 + Pipe.elems.len,
                Pipe.writeitem.b) ==
          Store(Store(Pipe.elems,
                      Pipe.elems.len,
                      Pipe.writeitem.b),
                1 + Pipe.elems.len,
                Pipe.writeitem.a))): state diverges

write_a write_b
  And(Pipe.elems.len >= 0,
      Pipe.nread >= 0,
      Pipe.nread <= Pipe.elems.len,
      Store(Store(Pipe.elems,
                  Pipe.elems.len,
                  Pipe.writeitem.a),
            1 + Pipe.elems.len,
            Pipe.writeitem.b) ==
      Store(Store(Pipe.elems,
                  Pipe.elems.len,
                  Pipe.writeitem.b),
            1 + Pipe.elems.len,
            Pipe.writeitem.a)): commute

write_a read
  And(Pipe.elems.len >= 0,
      Pipe.nread >= 0,
      Pipe.nread <= Pipe.elems.len,
      Pipe.elems.len == Pipe.nread): results diverge

write_a read
  And(Pipe.elems.len >= 0,
      Pipe.nread >= 0,
      Pipe.nread <= Pipe.elems.len,
      Not(Pipe.elems.len == Pipe.nread)): commute

write_b write_b
  And(Pipe.elems.len >= 0,
      Pipe.nread >= 0,
      Pipe.nread <= Pipe.elems.len): commute

write_b read
  And(Pipe.elems.len >= 0,
      Pipe.nread >= 0,
      Pipe.nread <= Pipe.elems.len,
      Pipe.elems.len == Pipe.nread): results diverge

write_b read
  And(Pipe.elems.len >= 0,
      Pipe.nread >= 0,
      Pipe.nread <= Pipe.elems.len,
      Not(Pipe.elems.len == Pipe.nread)): commute

read read
  And(Pipe.elems.len >= 0,
      Pipe.nread >= 0,
      Pipe.nread <= Pipe.elems.len,
      Pipe.elems.len == Pipe.nread): commute

read read
  And(Pipe.elems.len >= 0,
      Pipe.nread >= 0,
      Pipe.nread <= Pipe.elems.len,
      Not(Pipe.elems.len == Pipe.nread),
      Pipe.elems.len == 1 + Pipe.nread): results diverge

read read
  And(Pipe.elems.len >= 0,
      Pipe.nread >= 0,
      Pipe.nread <= Pipe.elems.len,
      Not(Pipe.elems.len == Pipe.nread),
      Not(Pipe.elems.len == 1 + Pipe.nread),
      Not(Pipe.elems[Pipe.nread] == Pipe.elems[1 + Pipe.nread])): results diverge

read read
  And(Pipe.elems.len >= 0,
      Pipe.nread >= 0,
      Pipe.nread <= Pipe.elems.len,
      Not(Pipe.elems.len == Pipe.nread),
      Not(Pipe.elems.len == 1 + Pipe.nread),
      Pipe.elems[Pipe.nread] == Pipe.elems[1 + Pipe.nread]): commute


u_write_a u_write_a
  UnordPipe.nitem >= 0: commute


u_write_a u_write_b
  And(UnordPipe.nitem >= 0,
      UnordPipe.writeitem.a == UnordPipe.writeitem.b): commute


u_write_a u_write_b
  And(UnordPipe.nitem >= 0,
      Not(UnordPipe.writeitem.a == UnordPipe.writeitem.b)): commute


u_write_a u_read
  And(UnordPipe.nitem >= 0,
      UnordPipe.items.choose.1 == 0,
      UnordPipe.nitem == 0): results diverge


u_write_a u_read
  And(UnordPipe.nitem >= 0,
      UnordPipe.items.choose.1 == 0,
      Not(UnordPipe.nitem == 0),
      Not(UnordPipe.writeitem.a == UnordPipe.items.someitem.1)): results diverge


u_write_a u_read
  And(UnordPipe.nitem >= 0,
      UnordPipe.items.choose.1 == 0,
      Not(UnordPipe.nitem == 0),
      UnordPipe.writeitem.a == UnordPipe.items.someitem.1): commute


u_write_a u_read
  And(UnordPipe.nitem >= 0,
      Not(UnordPipe.items.choose.1 == 0),
      UnordPipe.nitem == 0): results diverge


u_write_a u_read
  And(UnordPipe.nitem >= 0,
      Not(UnordPipe.items.choose.1 == 0),
      Not(UnordPipe.nitem == 0)): commute


u_write_b u_write_b
  UnordPipe.nitem >= 0: commute


u_write_b u_read
  And(UnordPipe.nitem >= 0,
      UnordPipe.items.choose.1 == 0,
      UnordPipe.nitem == 0): results diverge


u_write_b u_read
  And(UnordPipe.nitem >= 0,
      UnordPipe.items.choose.1 == 0,
      Not(UnordPipe.nitem == 0),
      Not(UnordPipe.writeitem.b == UnordPipe.items.someitem.1)): results diverge


u_write_b u_read
  And(UnordPipe.nitem >= 0,
      UnordPipe.items.choose.1 == 0,
      Not(UnordPipe.nitem == 0),
      UnordPipe.writeitem.b == UnordPipe.items.someitem.1): commute


u_write_b u_read
  And(UnordPipe.nitem >= 0,
      Not(UnordPipe.items.choose.1 == 0),
      UnordPipe.nitem == 0): results diverge


u_write_b u_read
  And(UnordPipe.nitem >= 0,
      Not(UnordPipe.items.choose.1 == 0),
      Not(UnordPipe.nitem == 0)): commute


u_read u_read
  And(UnordPipe.nitem >= 0, UnordPipe.nitem == 0): commute


u_read u_read
  And(UnordPipe.nitem >= 0,
      Not(UnordPipe.nitem == 0),
      UnordPipe.nitem == 1): results diverge


u_read u_read
  And(UnordPipe.nitem >= 0,
      Not(UnordPipe.nitem == 0),
      Not(UnordPipe.nitem == 1),
      Not(UnordPipe.items.someitem.1 ==
          UnordPipe.items.someitem.2)): results diverge


u_read u_read
  And(UnordPipe.nitem >= 0,
      Not(UnordPipe.nitem == 0),
      Not(UnordPipe.nitem == 1),
      UnordPipe.items.someitem.1 == UnordPipe.items.someitem.2): commute



